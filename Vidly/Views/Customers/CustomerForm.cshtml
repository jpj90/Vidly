@model Vidly.ViewModels.CustomerFormViewModel
@{
    ViewBag.Title = "New";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>New Customer</h2>

@* The using block will ensure that the form object is properly disposed AND that </form> tag is added *@
@using (Html.BeginForm("Save", "Customers"))
{
    @* this wrapper is bootstrap and will ensure a responsive form, surround each input field with it *@
    <div class="form-group">
        @* this will create a label *@
        @Html.LabelFor(m => m.Customer.Name)
        @* pretty cool is that when using this helper method Html.TextBoxFor, ASP.NET will auto-insert
            all validations incl. warning text based on the model data annotations. the second argument
            is an anonymous object where you can insert element attributes. if you want to insert a
            'class' attribute, prefix it with an @ sign to circumvent the reserved keyword stuff *@
        @Html.TextBoxFor(m => m.Customer.Name, new { @class = "form-control" })
    </div>
    <div class="form-group">
        @Html.LabelFor(m => m.Customer.Birthdate)
        @Html.TextBoxFor(m => m.Customer.Birthdate, "{0:d MMM yyyy}", new { @class = "form-control" })
    </div>
    <div class="form-group">
        @Html.LabelFor(m => m.Customer.MembershipTypeId)
        @Html.DropDownListFor(m => m.Customer.MembershipTypeId, new SelectList(Model.MembershipType, "Id", "Name"), "Select Membership Type", new { @class = "form-control" })
    </div>
    <div class="checkbox">
        <label>
            @Html.CheckBoxFor(m => m.Customer.IsSubscribedToNewsLetter) Subscribed to Newsletter?
        </label>
    </div>
    @Html.HiddenFor(m => m.Customer.Id)
    <button type="submit" class="btn btn-primary">Save</button>
}


