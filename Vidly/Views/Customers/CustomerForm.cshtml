@model Vidly.ViewModels.CustomerFormViewModel
@{
    ViewBag.Title = "New";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>New Customer</h2>

@* The using block will ensure that the form object is properly disposed AND that </form> tag is added *@
@using (Html.BeginForm("Save", "Customers"))
{
    // the boolean indicates if individual property error messages are displayed
    @Html.ValidationSummary(true, "please fix the following errors")
    @* this wrapper is bootstrap and will ensure a responsive form, surround each input field with it *@
    <div class="form-group">
        @* this will create a label *@
        @Html.LabelFor(m => m.Customer.Name)
        @* pretty cool is that when using this helper method Html.TextBoxFor, ASP.NET will auto-insert
            all validations incl. warning text based on the model data annotations. the second argument
            is an anonymous object where you can insert element attributes. if you want to insert a
            'class' attribute, prefix it with an @ sign to circumvent the reserved keyword stuff *@
        @Html.TextBoxFor(m => m.Customer.Name, new { @class = "form-control" })
        @* this below will hold any validation error messages. don't forget to add styling for
            the resulting classes in Site.css under /Content! *@
        @Html.ValidationMessageFor(m => m.Customer.Name)
    </div>
    <div class="form-group">
        @Html.LabelFor(m => m.Customer.MembershipTypeId)
        @Html.DropDownListFor(m => m.Customer.MembershipTypeId, new SelectList(Model.MembershipType, "Id", "Name"), "Select Membership Type", new { @class = "form-control" })
        @Html.ValidationMessageFor(m => m.Customer.MembershipTypeId)
    </div>
    <div class="form-group">
        @Html.LabelFor(m => m.Customer.Birthdate)
        @Html.TextBoxFor(m => m.Customer.Birthdate, "{0:d MMM yyyy}", new { @class = "form-control" })
        @Html.ValidationMessageFor(m => m.Customer.Birthdate)
    </div>

    <div class="checkbox">
        <label>
            @Html.CheckBoxFor(m => m.Customer.IsSubscribedToNewsLetter) Subscribed to Newsletter?
        </label>
    </div>
    @* the customer id field is added here as a !hidden! field to ensure that this data is
        available in the model when performing an update -> Udemy 4.44 *@
    @Html.HiddenFor(m => m.Customer.Id)
    @* the antiforgtoken has to be matched with a decorator on the controller -> Udemy 5.57 *@
    @Html.AntiForgeryToken()
    <button type="submit" class="btn btn-primary">Save</button>
}

@* allows for simple built-in validations to happen on the client -> Udemy 5.56 *@
@section scripts
{
    @Scripts.Render("~/bundles/jqueryval")
}



